class Node {
  int data;
  Node? left;
  Node? right;

  Node(this.data);
}

class BinaryTree {
  Node? root;

  void insertLevelOrderQueue(int data) {
    Node newNode = Node(data);
    if (root == null) {
      root = newNode;
      return;
    }

    List<Node> queue = [root!];
    while (queue.isNotEmpty) {
      Node current = queue.removeAt(0);
      if (current.left == null) {
        current.left = newNode;
        return;
      } else {
        queue.add(current.left!);
      }

      if (current.right == null) {
        current.right = newNode;
        return;
      } else {
        queue.add(current.right!);
      }
    }
  }

  List<int> inorderNonRecursive() {
    List<int> result = [];
    List<Node> stack = [];
    Node? current = root;

    while (stack.isNotEmpty || current != null) {
      while (current != null) {
        stack.add(current);
        current = current.left;
      }

      current = stack.removeLast();
      result.add(current.data);
      current = current.right;
    }

    return result;
  }

  List<int> preorderNonRecursive() {
    List<int> result = [];
    if (root == null) return result;

    List<Node> stack = [root!];

    while (stack.isNotEmpty) {
      Node current = stack.removeLast();
      result.add(current.data);

      if (current.right != null) stack.add(current.right!);
      if (current.left != null) stack.add(current.left!);
    }

    return result;
  }

  List<int> postorderNonRecursive() {
    List<int> result = [];
    if (root == null) return result;

    List<Node> stack1 = [root!];
    List<Node> stack2 = [];

    while (stack1.isNotEmpty) {
      Node current = stack1.removeLast();
      stack2.add(current);

      if (current.left != null) stack1.add(current.left!);
      if (current.right != null) stack1.add(current.right!);
    }

    while (stack2.isNotEmpty) {
      result.add(stack2.removeLast().data);
    }

    return result;
  }
}

void main() {
  BinaryTree tree = BinaryTree();

  tree.insertLevelOrderQueue(1);
  tree.insertLevelOrderQueue(2);
  tree.insertLevelOrderQueue(3);
  tree.insertLevelOrderQueue(4);
  tree.insertLevelOrderQueue(5);

  print('InOrder    : ${tree.inorderNonRecursive()}');
  print('PreOrder   : ${tree.preorderNonRecursive()}');
  print('PostOrder  : ${tree.postorderNonRecursive()}');
}
